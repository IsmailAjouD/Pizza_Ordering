@using PizzaOrdering.Models.Dtos
@inherits ProductDetailsBase

<DialogHeader ShowClose="true">
    @if (Product != null)
    {
        <div class="d-flex gap-1">
            <p class="text-danger">@Product.PizzaNum</p>
            <h1>@Product.PizzaName</h1>
        </div>
    }
</DialogHeader>

<DialogBody>
    <div>
        <div class="modal-body">
            @if (Product == null && ErrorMessage == null)
            {
                <DisplaySpinner />
            }
            else if (ErrorMessage != null)
            {
                <DisplayError ErrorMessage="@ErrorMessage"></DisplayError>
            }
            else
            {
                         <div>
                    @if (Descriptions != null)
                    {
                        @foreach (var (description, index) in Descriptions.Select((value, index) => (value, index)))
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" @bind="@isCheckedList[index]" />
                                <label class="form-check-label">@description</label>
                            </div>
               
                          
                        }
                        @foreach (var (description, index) in Descriptions.Select((value, index) => (value, index)))
                        {
                            if(Descriptions !=null && index >=0 && index < Descriptions.Count)
                            {
                                var newdescription = Descriptions[index];
                                if (isCheckedList != null && isCheckedList.Count == Descriptions.Count)
                                {
                                    if (!isCheckedList[index])
                                    {
                                        if(UncheckedDescriptions == null)
                                        {
                                            UncheckedDescriptions = new List<string>();
                                        }
                                        if (!UncheckedDescriptions.Contains(newdescription))
                                        {
                                            UncheckedDescriptions.Add(newdescription);
                                            isCheckedList[index] = false;
                                            Console.WriteLine("Unchecked Description Added: " + description); // Output to console
                                            foreach (var uncheckd in UncheckedDescriptions.Distinct())
                                            {

                                                Console.WriteLine("Unchecked UncheckedDescriptions: " + uncheckd);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (UncheckedDescriptions != null && UncheckedDescriptions.Contains(newdescription))
                                        {
                                            UncheckedDescriptions.Remove(newdescription);
                                            Console.WriteLine("Unchecked Description Removed: " + newdescription); // Output to console
                                            foreach (var uncheckd in UncheckedDescriptions.Distinct())
                                            {

                                                Console.WriteLine("Unchecked UncheckedDescriptions: " + uncheckd);
                                            }
                                        }
                                    }

                                }
                            }
                         @*    if (!isCheckedList[index])
                            {
                                UncheckedDescriptions.Add(description);
                                if (UncheckedDescriptions.Count > 0)
                                {
                                    foreach( var uncheckd in UncheckedDescriptions.Distinct())
                                    {

                                        Console.WriteLine("Unchecked Description: " + uncheckd);
                                    }
                                }
                            } *@
                        }
                     @*     @foreach (var (description, index) in Descriptions.Select((value, index) => (value, index)))
                            {
                                if (!isCheckedList[index])
                                {
                                    UncheckedDescriptions.Add(description);
                                }
                            }
                            @if (UncheckedDescriptions.Count > 0)
                            {
                                <div>
                                    Unchecked Descriptions:
                                    @foreach (var uncheckedDescription in UncheckedDescriptions.Distinct())
                                    {
                                        <div>@uncheckedDescription</div>
                               
                                        { Console.WriteLine("Unchecked Description: " + uncheckedDescription); }
                                    }
                                </div>
                            } *@
                                            }
                </div>
            }
        </div>

        <p>Vælg Size</p>
        @if (Product != null && Product.Sizes != null)
        {
            @foreach (var item in Product.Sizes)
            {
                <div class="d-flex">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="selectedSize" value="@item.SizeId" @onchange="() => UpdatePrice(item.SizeId)" checked="@IsChecked(item.Name)">
                        <label class="form-check-label">
                            <span>@item.Name</span>
                            <span>@item.Price</span>
                        </label>
                    </div>
                </div>
            }
        }
        else
        {
            <p>Product or Product sizes are not available.</p>
        }

        <p @onclick="ToggleVisibility">Extra tilbehør</p>
        <div class="extra-accessories @(ShowText ? "show" : "hide")">
            @if (ShowText)
            {
                @foreach (var item in ExtraItems)
                {
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" name="SelectedExtraItem" @onchange="() => UpdatePriceWithExtraItem(item.ExtraItemId)" />
                        <label class="form-check-label">@item.Name @item.Price</label>
                    </div>
                }
            }
        </div>
    </div>
</DialogBody>

<DialogFooter>
    <div class="d-flex align-items-center">
        <p>@TotalPrice</p>

        <div class="input-group">
            <div class="input-group-prepend">
                <button class="btn btn-danger" @onclick="Decrement">-</button>
            </div>
            <input type="number" class="form-control input-number" @bind="Quantity">
            <div class="input-group-append">
                <button class="btn btn-success" @onclick="Increment">+</button>
            </div>
        </div>

        @if (SelectedSizeId != null)
        {
            <p>@GetPrice(SelectedSizeId)</p>
        }
        <button type="button" class="btn btn-primary" @onclick="AddToCart_Click">
            Tilfø til bestiling
        </button>
        <button type="button" class="btn btn-secondary" @onclick="@(()=> Dialog.Hide("no"))">Fortyd</button>
    </div>
</DialogFooter>

<style>
    .extra-accessories {
        display: none; /* Initially hide the block of text */
    }

        .extra-accessories.show {
            display: block; /* Show the block of text when the 'show' class is applied */
        }

        .extra-accessories p {
            margin: 5px 0;
            font-size: 16px;
        }
</style>
